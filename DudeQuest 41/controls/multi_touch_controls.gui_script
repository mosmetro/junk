-- import
local ui = require("m.ui.ui")
-- local utils = require("m.utils")
-- local debug_draw = require("m.debug_draw")

-- localization
local defold = _G
local next = next
local max = math.max
local msg = msg
local get_node = gui.get_node
local get_height = gui.get_height
local get_screen_position = gui.get_screen_position
local set_color = gui.set_color
local set_render_order = gui.set_render_order
local vector4 = vmath.vector4
local on_input = runtime.on_input
local MULTI_TOUCH = ui.MULTI_TOUCH
local LEFT = ui.LEFT
local RIGHT = ui.RIGHT
local UP = ui.UP
local DOWN = ui.DOWN
local A = ui.A
local B = ui.B
local X = ui.X
local Y = ui.Y
local PAUSE = ui.PAUSE

-- functions
local check_position
local enable
local disable

-- constants
local COLOR_PRESSED = vector4(1, 1, 1, 0.4)
local COLOR_RELEASED = vector4(1, 1, 1, 0.15)
local SIZE_A = 180--190
local SIZE_B = 50
local SIZE_C = 60
local MIN_DISTANCE_SQUARED

local buttons
local images

---------------------------------------
-- init
---------------------------------------

function defold.init(self)
   local sys_info = sys.get_sys_info()
   local system_name = sys_info.system_name
   if system_name == "iPhone OS" or system_name == "Android" then
      ui.ingame_controls_context = self
      enable()
   else
      disable()
      return
   end

   set_render_order(15)

   local multiplier = get_height() / 1080 -- current display profile height / reference profile (1920x1080) height
   -- utils.log(multiplier)
   SIZE_A = multiplier * SIZE_A
   -- utils.log(SIZE_A)
   SIZE_B = multiplier * SIZE_B
   -- utils.log(SIZE_B)
   SIZE_C = multiplier * SIZE_C
   -- utils.log(SIZE_C)
   MIN_DISTANCE_SQUARED = max(SIZE_A, SIZE_B, SIZE_C) ^ 2

   images = {
      [LEFT]  = get_node(LEFT),
      [RIGHT] = get_node(RIGHT),
      [A]     = get_node(A),
      [X]     = get_node(X),
      [B]     = get_node(B),
      [Y]     = get_node(Y),
      [UP]    = get_node(UP),
      [DOWN]  = get_node(DOWN),
      [PAUSE] = get_node(PAUSE),
   }

   local left = get_screen_position(images[LEFT])
   local right = get_screen_position(images[RIGHT])
   local a = get_screen_position(images[A])
   local x = get_screen_position(images[X])
   local b = get_screen_position(images[B])
   local y = get_screen_position(images[Y])
   local up = get_screen_position(images[UP])
   local down = get_screen_position(images[DOWN])
   local pause = get_screen_position(images[PAUSE])

   buttons = {
      [LEFT]  = { position_x = left.x,  position_y = left.y,  radius_squared = SIZE_A^2 },
      [RIGHT] = { position_x = right.x, position_y = right.y, radius_squared = SIZE_A^2 },
      [A]     = { position_x = a.x,     position_y = a.y,     radius_squared = SIZE_A^2 },
      [X]     = { position_x = x.x,     position_y = x.y,     radius_squared = SIZE_B^2 },
      [B]     = { position_x = b.x,     position_y = b.y,     radius_squared = SIZE_A^2 },
      [Y]     = { position_x = y.x,     position_y = y.y,     radius_squared = SIZE_C^2 },
      [UP]    = { position_x = up.x,    position_y = up.y,    radius_squared = SIZE_C^2 },
      [DOWN]  = { position_x = down.x,  position_y = down.y,  radius_squared = SIZE_B^2 },
      [PAUSE] = { position_x = pause.x, position_y = pause.y, radius_squared = SIZE_B^2 },
   }

   self.enable = enable
   self.disable = disable
end -- init

function defold.on_input(_, action_id, action)
   if (action_id == MULTI_TOUCH) and action.touch then
      for actn, _ in next, buttons do
         for _, touch in next, action.touch do
            if actn == check_position(touch.screen_x, touch.screen_y) then
               on_input(actn, touch.released == false)
               set_color(images[actn], touch.released and COLOR_RELEASED or COLOR_PRESSED)
               break
            else
               on_input(actn, false)
               set_color(images[actn], COLOR_RELEASED)
            end
         end
      end
   end
   return true
end -- on_input

function defold.on_message(_, message_id)
   -- utils.log(message_id)
   if message_id == msg.ENABLE then
      runtime.reset_input()
      for _, img in next, images do
         set_color(img, COLOR_RELEASED)
      end
   end
end -- on_message

-- function defold.update()
--    local position = vmath.vector3()
--    local sqrt = math.sqrt
--    local vector3_set_components = fastmath.vector3_set_components
--    for _, button in next, buttons do
--       vector3_set_components(position, button.position_x, button.position_y)
--       debug_draw.circle(position, sqrt(button.radius_squared), 32)
--    end
-- end -- update

function check_position(x, y)
   local result = nil
   local min_distance_sq = MIN_DISTANCE_SQUARED
   for action, description in next, buttons do
      local dx = x - description.position_x
      local dy = y - description.position_y
      local distance_sq = dx * dx + dy * dy
      if (distance_sq < min_distance_sq) and (distance_sq < description.radius_squared) then
         min_distance_sq = distance_sq
         result = action
      end
   end
   return result
end -- check_position

function enable()
   msg.post("#", msg.ENABLE)
end -- enable

function disable()
   msg.post("#", msg.DISABLE)
end -- disable
