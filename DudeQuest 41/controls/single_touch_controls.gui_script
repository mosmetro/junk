-- import
local ui = require("m.ui.ui")
local utils = require("m.utils")

-- localization
local defold = _G
local ensure_zero = fastmath.ensure_zero
local tonumber = tonumber
local next = next
local msg = msg
local post = msg.post
local get_config = sys.get_config
local set_render_order = gui.set_render_order
local get_width = gui.get_width
local get_height = gui.get_height
local execute_in_context = runtime.execute_in_context
local POINTER_DOWN = ui.POINTER_DOWN
local POINTER_UP = ui.POINTER_UP
local POINTER_DRAGGED = ui.POINTER_DRAGGED
local POINTER_CANCELLED = ui.POINTER_CANCELLED
local TOUCH = ui.TOUCH
local MULTI_TOUCH = ui.MULTI_TOUCH

-- functions
local is_down
local is_up
local is_pressed
local send_event
local on_event
local enable
local disable
local reset_input

local event = {
   type = POINTER_CANCELLED,
   x    = 0,
   y    = 0,
   dx   = 0,
   dy   = 0,
   vx   = 0,
   vy   = 0,
}

local current_state = {
   [TOUCH] = false,
   [MULTI_TOUCH] = false,
}

local previous_state = {
   [TOUCH] = false,
   [MULTI_TOUCH] = false,
}

local current_x = 0
local current_y = 0

local LAYOUT_MULTIPLIER_X
local LAYOUT_MULTIPLIER_Y

---------------------------------------
-- init
---------------------------------------

function defold.init(self)
   ui.single_touch_controls_context = self
   post("#", msg.DISABLE)
   set_render_order(0)

   local layout_width  = get_width()
   local layout_height = get_height()
   utils.log("layout", layout_width, layout_height)
   local default_layout_width  = tonumber(get_config("display.width"))
   local default_layout_height = tonumber(get_config("display.height"))
   utils.log("default layout", default_layout_width, default_layout_height)
   LAYOUT_MULTIPLIER_X = layout_width / default_layout_width
   LAYOUT_MULTIPLIER_Y = layout_height / default_layout_height
   ui.LAYOUT_MULTIPLIER_X = LAYOUT_MULTIPLIER_X
   ui.LAYOUT_MULTIPLIER_Y = LAYOUT_MULTIPLIER_Y
   utils.log("layout_multiplier", LAYOUT_MULTIPLIER_X, LAYOUT_MULTIPLIER_Y)

   self.enable = enable
   self.disable = disable
end -- init

---------------------------------------
-- final
---------------------------------------

function defold.final()
   ui.single_touch_controls_context = nil
end -- final

---------------------------------------
-- on_input
---------------------------------------

function defold.on_input(_, action_id, action)
   if action_id and action_id ~= MULTI_TOUCH then
      current_state[action_id] = (action.released == false)
      current_x = action.x -- this value ALWAYS in default(config) layout space
      current_y = action.y -- this value ALWAYS in default(config) layout space
      utils.log(action.screen_x, action.screen_y)
   end
   return true
end -- on_input

---------------------------------------
-- update
---------------------------------------

function defold.update(_, dt)
   local first_responder = ui.first_responder
   if not first_responder then return end

   for action_id, _ in next, current_state do
      if action_id == TOUCH then
         if is_down(action_id) then
            event.type = POINTER_DOWN
            event.x = current_x
            event.y = current_y
            send_event(first_responder, event)

         elseif is_pressed(action_id) then
            local dx = ensure_zero((current_x - event.x) * LAYOUT_MULTIPLIER_X)
            local dy = ensure_zero((current_y - event.y) * LAYOUT_MULTIPLIER_Y)
            if (dx ~= 0) or (dy ~= 0) then
               event.type = POINTER_DRAGGED
               event.x = current_x
               event.y = current_y
               event.dx = dx
               event.dy = dy
               event.vx = dx / dt
               event.vy = dy / dt
               send_event(first_responder, event)
            else
               event.dx = 0
               event.dy = 0
               event.vx = 0
               event.vy = 0
            end
         elseif is_up(action_id) then
            event.type = POINTER_UP
            event.x = current_x
            event.y = current_y
            send_event(first_responder, event)
         end
      end -- if action_id...
      previous_state[action_id] = current_state[action_id]
   end -- for action_id...
end -- update

---------------------------------------
-- on_message
---------------------------------------

function defold.on_message(_, message_id, _, sender)
   -- utils.log(message_id, sender)
   if message_id == msg.ENABLE then
      reset_input()
   end
end -- on_message

---------------------------------------
-- send_event
---------------------------------------

function send_event(context, e)
   execute_in_context(on_event, context, e)
end -- send_event

---------------------------------------
-- on_event
---------------------------------------

function on_event(context, e)
   for _, control in next, context.controls do
      if control.on_event(e) then return end
   end

   if context.next_responder then
      send_event(context.next_responder, e)
   end
end -- on_event

---------------------------------------
-- is_down
---------------------------------------

function is_down(action_id)
   return current_state[action_id] and (previous_state[action_id] ~= current_state[action_id])
end -- is_down

---------------------------------------
-- is_up
---------------------------------------

function is_up(action_id)
   return (not current_state[action_id]) and (previous_state[action_id] ~= current_state[action_id])
end -- is_up

---------------------------------------
-- is_pressed
---------------------------------------

function is_pressed(action_id)
   return current_state[action_id]
end -- is_pressed

---------------------------------------
-- enable
---------------------------------------

function enable()
   post("#", msg.ENABLE)
end -- enable

---------------------------------------
-- disable
---------------------------------------

function disable()
   ui.first_responder = nil
   post("#", msg.DISABLE)
end -- disable

---------------------------------------
-- reset_input
---------------------------------------

function reset_input()
   utils.log("ui reset input")
   current_state[TOUCH] = false
   current_state[MULTI_TOUCH] = false
   previous_state[TOUCH] = false
   previous_state[MULTI_TOUCH] = false
end -- reset_input
