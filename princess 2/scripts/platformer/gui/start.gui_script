local defold = _G

-- import
local MSG = require("scripts.shared.messages")
local ui = require("scripts.shared.ui.ui")
local SimpleButton = require("scripts.shared.ui.controls.simple_button")
local translations = require("scripts.platformer.translations")
local utils = require("scripts.shared.utils")
local nc = require("scripts.shared.notification_center")
-- local application = require("scripts.shared.application")
local thread = require("scripts.shared.thread")

-- localization
local execute_in_context = utils.execute_in_context
local translate = translations.translate
local next = next
local post = msg.post
local get_node = gui.get_node
local set_render_order = gui.set_render_order
local set_text = gui.set_text
local url = msg.url

-- functions
local enable
local disable
local on_language_change

-- local titles = {
-- 	file1 = translations.FILE1,
-- 	file2 = translations.FILE2,
-- 	file3 = translations.FILE3,
-- }
---------------------------------------

-- init

---------------------------------------

function defold.init (self)
	ui.start_context = self
	disable()
	set_render_order(1)

	local start_button = SimpleButton.new {
		image_node = get_node("start/image"),
		text_node = get_node("start/text"),
		released = SimpleButton.RELEASED_IMAGE,
		pressed = SimpleButton.PRESSED_IMAGE,
		callback = function ()
			execute_in_context(ui.single_touch_controls_context, function (context)
				context:disable()
			end)
			thread.new(self, function ()
				thread.load(self, url("main:/region1#level1_proxy"), true)
				post(url("main:/region1#level1_proxy"), MSG.SET_TIME_STEP, { factor = 1, mode = 1 })
				execute_in_context(ui.ingame_controls_context, function (context)
					context:enable()
				end)
				disable()
			end)
		end,
		on_language_change = function (sender)
			set_text(sender.text_node, translate(translations.GAME_START))
		end,
	}

	local options_button = SimpleButton.new {
		image_node = get_node("options/image"),
		text_node = get_node("options/text"),
		released = SimpleButton.RELEASED_IMAGE,
		pressed = SimpleButton.PRESSED_IMAGE,
		callback = function ()
			disable()
			execute_in_context(ui.options_context, function (context)
				context:enable(self)
			end)
		end,
		on_language_change = function (sender)
			set_text(sender.text_node, translate(translations.GAME_OPTIONS))
		end,
	}

	local select_file_button = SimpleButton.new {
		image_node = get_node("select_file/image"),
		text_node = get_node("select_file/text"),
		released = SimpleButton.RELEASED_IMAGE,
		pressed = SimpleButton.PRESSED_IMAGE,
		callback = function ()
			disable()
			execute_in_context(ui.select_file_context, function (context)
				context:enable()
			end)
		end,
		on_language_change = function (sender)
			set_text(sender.text_node, translate(translations.GAME_SELECT_FILE))
		end,
	}

	self.controls = {
		start_button,
		options_button,
		select_file_button,
	}

	self.enable = enable
	self.disable = disable
	nc.add_observer(self, translations.LANGUAGE_DID_CHANGE_NOTIFICATION, on_language_change)
end -- init

---------------------------------------
-- final
---------------------------------------

function defold.final (self)
	ui.start_context = nil
	nc.remove_observer(self)
end -- final

---------------------------------------
-- update
---------------------------------------
function defold.update (self, dt)
	thread.update(self, dt)
end -- update

---------------------------------------
-- on_message
---------------------------------------

function defold.on_message (self, message_id, message, sender)
	thread.on_message(self, message_id, message, sender)
end -- on_message

---------------------------------------
-- enable
---------------------------------------

function enable (self)
	ui.first_responder = self
	post("#", MSG.ENABLE)
end -- enable

---------------------------------------
-- disable
---------------------------------------

function disable ()
	ui.first_responder = nil
	post("#", MSG.DISABLE)
end -- disable

---------------------------------------
-- on_language_change
---------------------------------------

function on_language_change (self)
	for _, control in next, self.controls do
		if control.on_language_change then
			control:on_language_change()
		end
	end
end -- on_language_change
