local defold = _G

-- imports
local game = require("scripts.platformer.game")
local utils = require("scripts.shared.utils")
local MSG = require("scripts.shared.messages")
-- local COLOR = require("scripts.shared.colors")
-- local nc = require("scripts.shared.notification_center")

-- localization
local get_id = go.get_id
local clamp = utils.clamp
local get_position = go.get_position
local set_position = go.set_position
local post = msg.post
local vector3 = vmath.vector3
local lerp = vmath.lerp
local get_bounds = tilemap.get_bounds
local abs = math.abs
local execute_in_context = utils.execute_in_context
local get_shared_data = game.get_shared_data
-- local sign = utils.sign

local frame_update

-- constants
local TILE_SIZE = 16
local FOLLOW_TIME = 0.2
local SWITCH_TIME = 0.02
local SWITCH_SPEED = 0.2

-- local PARALLAX_1 = 80

-- properties
go.property("look_ahead", 8)
go.property("focus_height", 64)
go.property("vertical_offset", 16)
go.property("map", msg.url())
go.property("clear_color", vmath.vector4())

---------------------------------------

-- init

---------------------------------------

function defold.init(self)
	post("#camera", MSG.ACQUIRE_CAMERA_FOCUS)
	post("@render:", MSG.CLEAR_COLOR, { color = self.clear_color * (1/255) } )
	-- post("#sprite", MSG.DISABLE)
	self.gameobject = get_id()
	self.parallax = get_id("/parallax/root")

	local x, y, w, h = get_bounds(self.map)
	local pos = get_position(self.map)
	x = x - 1
	y = y - 1
	local half_logic_size = game.window.logic_size * 0.5
	self.left = pos.x + (x * TILE_SIZE) + half_logic_size.x + TILE_SIZE
	self.right = pos.x + ((x + w) * TILE_SIZE) - half_logic_size.x - 3 * TILE_SIZE
	self.bottom = pos.y + (y * TILE_SIZE) + half_logic_size.y + TILE_SIZE
	self.top = pos.y + ((y + h) * TILE_SIZE) - half_logic_size.y - 3 * TILE_SIZE
	-- print(self.left, self.right, self.bottom, self.top)
	self.space_x = self.right - self.left
	self.space_y = self.top - self.bottom

	self.t = 0.2

	get_shared_data(self.gameobject).target = {
		x = 0,
		y = 0,
		bottom = 0,
		top = 0,
		direction = 1
	}
	game.add_update_callback(self, frame_update, game.last_order)
end -- init

---------------------------------------
-- final
---------------------------------------

function defold.final(self)
	game.remove_update_callback(self, game.last_order)
	game.remove_shared_data(self.gameobject)
	post("#camera", MSG.RELEASE_CAMERA_FOCUS)
end -- final

---------------------------------------
-- frame_update
---------------------------------------

function frame_update(self, dt)
	-- if dt == 0 then return end

	local target = get_shared_data(self.gameobject).target
	local target_bottom = target.bottom + self.vertical_offset
	local target_top = target.top + self.vertical_offset
	local direction = target.direction
	local target_x = target.x + direction * self.look_ahead
	local target_y = target.y + self.vertical_offset

	if (self.prev_direction or 1) == direction then
		if self.t < FOLLOW_TIME then
			self.t = self.t + SWITCH_SPEED * dt
		else
			self.t = FOLLOW_TIME
		end
	else
		self.t = SWITCH_TIME
	end
	self.prev_direction = direction

	local focus_position = self.focus_position
	local camera_position = self.position
	if not focus_position then
		focus_position = vector3(target_x, target_y, 0)
		camera_position = vector3(focus_position)
	end

	local focus_bottom = focus_position.y
	local focus_top = focus_position.y + self.focus_height

	local shift_y = target_bottom < focus_bottom and target_bottom - focus_bottom or (target_top > focus_top and target_top - focus_top or 0)

	focus_position.x = target_x
	focus_position.y = focus_position.y + shift_y

	focus_position.x = clamp(focus_position.x, self.left, self.right)
	focus_position.y = clamp(focus_position.y, self.bottom, self.top)

	local x = lerp(self.t, camera_position.x, focus_position.x)
	local y = lerp(FOLLOW_TIME, camera_position.y, focus_position.y)

	if abs(camera_position.x - x) > 0.1 then
		camera_position.x = x
	end

	if abs(camera_position.y - y) > 0.1 then
		camera_position.y = y
	end

	set_position(camera_position, self.gameobject)
	self.focus_position = focus_position
	self.position = camera_position

	local camera_x = ((camera_position.x - self.left) / self.space_x) * 2 - 1
	local camera_y = ((camera_position.y - self.bottom) / self.space_y) * 2 - 1
	-- print(camera_y)
	local parallax_context = get_shared_data(self.parallax).context
	execute_in_context(parallax_context, parallax_context.follow_camera, camera_x, camera_y)
	-- local cam_x = camera_position.x - self.left
	-- local camera_x = (camera_position.x - self.left / self.space_x) * 2 - 1
	-- local forest_x = PARALLAX_1 * k
	-- set_position(vector3(-forest_x, 0, -1), "forest_near")
	-- post("@render:", "draw_line", { start_point = vector3(focus_position.x, focus_bottom, 0), end_point = vector3(focus_position.x, focus_top, 0), color = COLOR.MAGENTA } )
end -- frame_update
