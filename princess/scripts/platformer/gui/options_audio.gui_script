-- import
local MSG = require("scripts.shared.messages")
local ui = require("scripts.shared.ui.ui")
local SimpleSlider = require("scripts.shared.ui.controls.simple_slider")
local SimpleButton = require("scripts.shared.ui.controls.simple_button")
local translations = require("scripts.platformer.translations")
local nc = require("scripts.shared.notification_center")
local utils = require("scripts.shared.utils")
local COLOR = require("scripts.shared.colors")

-- localization
local defold = _G
local fmod = fmod
local set_position = gui.set_position
local get_position = gui.get_position
local get_text_metrics_from_node = gui.get_text_metrics_from_node
local execute_in_context = utils.execute_in_context
local translate = translations.translate
local next = next
local post = msg.post
-- local url = msg.url
local get_node = gui.get_node
local set_render_order = gui.set_render_order
local set_text = gui.set_text
local tostring = tostring
-- local format = string.format

-- functions
local enable
local disable
local on_language_change

--constants
local RELEASED_COLOR = COLOR.WHITE
local PRESSED_COLOR = COLOR.YELLOW_500

---------------------------------------
-- init
---------------------------------------

function defold.init (self)
	ui.audio_options_context = self
	disable(self)
	set_render_order(8)

	local music_bus = nil
	local soundfx_bus = nil

	local music_slider = SimpleSlider.new {
		min_value = 0,
		max_value = 100,
		is_integral = true,
		track_node = get_node("music/track/grey"),
		value_node = get_node("music/track/red"),
		thumb_node = get_node("music/thumb/image"),
		thumb_background_node = get_node("music/thumb/background"),
		text_title_node = get_node("music/text/title"),
		text_value_node = get_node("music/text/value"),
		track_start_node = get_node("music/track/start"),
		track_end_node = get_node("music/track/end"),
		released = SimpleSlider.RELEASED_IMAGE,
		pressed = SimpleSlider.PRESSED_IMAGE,
		released_color = RELEASED_COLOR,
		pressed_color = PRESSED_COLOR,
		callback = function (sender)
			local value, raw_value = sender.get_value()
			value = (value == 0) and translate(translations.OPTIONS_AUDIO_SLIDER_MUSIC_MIN_VALUE) or tostring(value)
			set_text(sender.text_value_node, value)
			if not music_bus then
				music_bus = fmod.studio.system:get_bus("bus:/music")
			end
			music_bus:set_volume(raw_value)
			-- set_group_gain("music", raw_value)
		end,
		on_language_change = function (sender)
			set_text(sender.text_title_node, translate(translations.OPTIONS_AUDIO_SLIDER_MUSIC_TITLE))
			local value, _ = sender.get_value()
			value = (value == 0) and translate(translations.OPTIONS_AUDIO_SLIDER_MUSIC_MIN_VALUE) or tostring(value)
			set_text(sender.text_value_node, value)
			local title_width = get_text_metrics_from_node(sender.text_title_node).width
			local position = get_position(sender.text_title_node)
			position.x = position.x + title_width + 20
			set_position(sender.text_value_node, position)
		end,
	}

	local sound_slider = SimpleSlider.new {
		min_value = 0,
		max_value = 100,
		is_integral = true,
		track_node = get_node("sound/track/grey"),
		value_node = get_node("sound/track/red"),
		thumb_node = get_node("sound/thumb/image"),
		thumb_background_node = get_node("sound/thumb/background"),
		text_title_node = get_node("sound/text/title"),
		text_value_node = get_node("sound/text/value"),
		track_start_node = get_node("sound/track/start"),
		track_end_node = get_node("sound/track/end"),
		released = SimpleSlider.RELEASED_IMAGE,
		pressed = SimpleSlider.PRESSED_IMAGE,
		released_color = RELEASED_COLOR,
		pressed_color = PRESSED_COLOR,
		callback = function (sender)
			local value, raw_value = sender.get_value()
			value = (value == 0) and translate(translations.OPTIONS_AUDIO_SLIDER_SOUND_MIN_VALUE) or tostring(value)
			set_text(sender.text_value_node, value)
			if not soundfx_bus then
				soundfx_bus = fmod.studio.system:get_bus("bus:/soundfx")
			end
			soundfx_bus:set_volume(raw_value)
		end,
		on_language_change = function (sender)
			set_text(sender.text_title_node, translate(translations.OPTIONS_AUDIO_SLIDER_SOUND_TITLE))
			local value, _ = sender.get_value()
			value = (value == 0) and translate(translations.OPTIONS_AUDIO_SLIDER_SOUND_MIN_VALUE) or tostring(value)
			set_text(sender.text_value_node, value)
			local title_width = get_text_metrics_from_node(sender.text_title_node).width
			local position = get_position(sender.text_title_node)
			position.x = position.x + title_width + 20
			set_position(sender.text_value_node, position)
		end,
	}

	local back_button = SimpleButton.new {
		sensor_node = get_node("back/sensor"),
		image_node = get_node("back/image"),
		text_node = get_node("back/text"),
		released = SimpleButton.RELEASED_IMAGE,
		pressed = SimpleButton.PRESSED_IMAGE,
		callback = function ()
			disable(self)
			if self.return_context then
				execute_in_context(self.return_context, self.return_context.enable)
				self.return_context = nil
			end
		end,
		on_language_change = function (sender)
			set_text(sender.text_node, translate(translations.OPTIONS_COMMON_BUTTON_BACK))
		end,
	} -- back_button

	self.controls = {
		music_slider,
		sound_slider,
		back_button,
	}

	self.enable = enable
	self.disable = disable
	nc.add_observer(self, translations.LANGUAGE_DID_CHANGE_NOTIFICATION, on_language_change)
end -- init

---------------------------------------
-- final
---------------------------------------

function defold.final (self)
	ui.audio_options_context = nil
	nc.remove_observer(self)
end -- final

---------------------------------------
-- on_message
---------------------------------------

function defold.on_message (self, message_id)
	if self.return_context and (message_id == MSG.ENABLE) then
		ui.first_responder = self
	end
end -- on_message

---------------------------------------
-- enable
---------------------------------------

function enable(self, return_context)
	if return_context then
		self.return_context = return_context
	end
	post("#", MSG.ENABLE)
end -- enable

---------------------------------------
-- disable
---------------------------------------

function disable(self)
	if self.return_context then
		ui.first_responder = nil
	end
	post("#", MSG.DISABLE)
end -- disable

---------------------------------------
-- on_language_change
---------------------------------------

function on_language_change (self)
	local title_node = get_node("title/text")
	set_text(title_node, translate(translations.OPTIONS_AUDIO_TITLE))

	for _, control in next, self.controls do
		if control.on_language_change then
			control:on_language_change()
		end
	end
end -- on_language_change
