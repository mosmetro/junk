-- import
local MSG = require("scripts.shared.messages")
local game = require("scripts.platformer.game")
local ui = require("scripts.shared.ui.ui")
-- local utils = require("scripts.shared.utils")
local debug_draw = require("scripts.shared.debug_draw")

-- localization
local defold = _G
local MULTI_TOUCH = ui.MULTI_TOUCH
local LEFT = ui.LEFT
local RIGHT = ui.RIGHT
local UP = ui.UP
local DOWN = ui.DOWN
local DOWN_LEFT = ui.DOWN_LEFT
local DOWN_RIGHT = ui.DOWN_RIGHT
local A = ui.A
local B = ui.B
local X = ui.X
local Y = ui.Y
local L = ui.L
local R = ui.R
local get_node = gui.get_node
-- local get_position = gui.get_position
local get_screen_position = gui.get_screen_position
-- local get_width = gui.get_width
-- local get_height = gui.get_height
-- local get_config = sys.get_config
local set_color = gui.set_color
local next = next
local set_render_order = gui.set_render_order
local vector4 = vmath.vector4
local post = msg.post
local sqrt = math.sqrt
local max = math.max
local get_height = gui.get_height
local on_input = game.on_input

-- functions
local check_position
local enable
local disable

-- constants
local COLOR_PRESSED = vector4(1, 1, 1, 0.4)
local COLOR_RELEASED = vector4(1, 1, 1, 0.15)

-- not constants :)
local SIZE_A = 181
local SIZE_B = 70
local SIZE_C = 100

---------------------------------------
-- init
---------------------------------------

function defold.init(self)
   ui.multi_touch_controls_context = self
   disable()
   set_render_order(0)

   local multiplier = get_height() / 1080 -- current display profile height / reference profile (1920x1080) height
   -- utils.log(multiplier)
   SIZE_A = multiplier * SIZE_A
   -- utils.log(SIZE_A)
   SIZE_B = multiplier * SIZE_B
   -- utils.log(SIZE_B)
   SIZE_C = multiplier * SIZE_C
   -- utils.log(SIZE_C)
   self.min_distance_sq = max(SIZE_A, SIZE_B, SIZE_C) ^ 2

   self.buttons = {
      [LEFT]  = { position = get_screen_position(get_node(LEFT)), radius_squared = SIZE_A * SIZE_A },
      [RIGHT] = { position = get_screen_position(get_node(RIGHT)), radius_squared = SIZE_A * SIZE_A },
      [A]     = { position = get_screen_position(get_node(A)), radius_squared = SIZE_A * SIZE_A },
      [X]     = { position = get_screen_position(get_node(X)), radius_squared = SIZE_A * SIZE_A },
      [B]     = { position = get_screen_position(get_node(B)), radius_squared = SIZE_A * SIZE_A },
      [Y]     = { position = get_screen_position(get_node(Y)), radius_squared = SIZE_A * SIZE_A },
      -- [DOWN_LEFT]  = { position = get_screen_position(get_node(DOWN_LEFT)), radius_squared = SIZE_B^2 },
      -- [DOWN_RIGHT] = { position = get_screen_position(get_node(DOWN_RIGHT)), radius_squared = SIZE_B^2 },
      -- [UP]    = { position = get_screen_position(get_node(UP)), radius_squared = SIZE_C * SIZE_C },
      -- [DOWN]  = { position = get_screen_position(get_node(DOWN)), radius_squared = SIZE_C * SIZE_C },
      [L]     = { position = get_screen_position(get_node(L)), radius_squared = SIZE_B^2 },
      [R]     = { position = get_screen_position(get_node(R)), radius_squared = SIZE_B^2 },
   }

   self.images = {
      [LEFT]  = get_node("left_image"),
      [RIGHT] = get_node(RIGHT),
      [A]     = get_node(A),
      [X]     = get_node("x_image"),
      [B]     = get_node("b_image"),
      [Y]     = get_node("y_image"),
      -- [DOWN_LEFT]  = get_node("down_left_image"),
      -- [DOWN_RIGHT] = get_node("down_right_image"),
      -- [UP]  = get_node("up_image"),
      -- [DOWN] = get_node("down_image"),
      [L]  = get_node(L),
      [R] = get_node(R),
   }

   self.enable = enable
   self.disable = disable
end -- init

---------------------------------------
-- final
---------------------------------------

function defold.final ()
   ui.multi_touch_controls_context = nil
end -- final

---------------------------------------
-- on_input
---------------------------------------

function defold.on_input(self, action_id, action)
   if (action_id == MULTI_TOUCH) and action.touch then
      for actn, _ in next, self.buttons do
         for _, touch in next, action.touch do
            if actn == check_position(self, touch.screen_x, touch.screen_y) then
               on_input(actn, touch.released == false)
               -- local img = self.images[actn]
               -- if img then
               set_color(self.images[actn], touch.released and COLOR_RELEASED or COLOR_PRESSED)
               -- end
               break
            else
               on_input(actn, false)
               set_color(self.images[actn], COLOR_RELEASED)
               -- local img = self.images[actn]
               -- if img then
               --    set_color(img, COLOR_RELEASED)
               -- end
            end
         end
      end
   end
   return true
end -- on_input

---------------------------------------
-- update
---------------------------------------

-- function defold.update(self)
--    for _, n in next, self.buttons do
--       debug_draw.circle(n.position, sqrt(n.radius_squared), 32)
--    end
-- end -- update

---------------------------------------
-- check_position
---------------------------------------

function check_position (self, x, y)
   local result = nil
   local min_distance_sq = self.min_distance_sq --90000--25000--60000
   for action, description in next, self.buttons do
      local dx = x - description.position.x
      local dy = y - description.position.y
      local distance_sq = dx * dx + dy * dy
      if distance_sq < min_distance_sq then
         min_distance_sq = distance_sq
         if distance_sq < description.radius_squared then
            result = action
         end
      end
   end
   return result
end -- check_position

---------------------------------------
-- enable
---------------------------------------

function enable(self)
   game.reset_input()
   for _, img in next, self.images do
      set_color(img, COLOR_RELEASED)
   end
   post("#", MSG.ENABLE)
end -- enable

---------------------------------------
-- disable
---------------------------------------

function disable ()
   post("#", MSG.DISABLE)
end -- disable
