local defold = _G

-- import
local MSG = require("scripts.shared.messages")
local ui = require("scripts.shared.ui.ui")
local SimpleButton = require("scripts.shared.ui.controls.simple_button")
local translations = require("scripts.platformer.translations")
local utils = require("scripts.shared.utils")
local nc = require("scripts.shared.notification_center")
-- local application = require("scripts.shared.application")
-- local thread = require("scripts.shared.thread")

-- localization
local execute_in_context = utils.execute_in_context
local translate = translations.translate
local next = next
local post = msg.post
local get_node = gui.get_node
local set_render_order = gui.set_render_order
local set_text = gui.set_text
local tostring = tostring
-- local url = msg.url

-- functions
local enable
local disable
local on_language_change

---------------------------------------
-- init
---------------------------------------

function defold.init (self)
	ui.select_season_context = self
	disable()
	set_render_order(1)

  local back_button = SimpleButton.new {
		image_node = get_node("back/image"),
		text_node = get_node("back/text"),
		released = SimpleButton.RELEASED_IMAGE,
		pressed = SimpleButton.PRESSED_IMAGE,
		callback = function ()
			disable()
			if self.return_context then
				execute_in_context(self.return_context, self.return_context.enable)
			end
		end,
		on_language_change = function (sender)
			set_text(sender.text_node, translate(translations.OPTIONS_COMMON_BUTTON_BACK))
		end,
	} -- back_button

  local season_buttons = {}
	local controls = {
		back_button,
	}

  local function make_button (season_number)
		local button = SimpleButton.new {
			image_node = get_node("s" .. tostring(season_number) .. "/image"),
			text_node = get_node("s" .. tostring(season_number) .. "/text"),
      released = SimpleButton.RELEASED_IMAGE,
      pressed = SimpleButton.PRESSED_IMAGE,
      callback = function ()
        disable()
        execute_in_context(ui.select_episode_context, ui.select_episode_context.enable, self, season_number)
      end,
      on_language_change = function(sender)
        set_text(sender.text_node, translate(translations["SEASON" .. tostring(season_number)]))
      end,
		}
    season_buttons[#season_buttons] = button
		controls[#controls + 1] = button
	end -- make_button

  for i = 1, 4 do
    make_button(i)
  end

  self.season_buttons = season_buttons
  self.controls = controls
	self.enable = enable
	self.disable = disable
	nc.add_observer(self, translations.LANGUAGE_DID_CHANGE_NOTIFICATION, on_language_change)
end -- init

---------------------------------------
-- final
---------------------------------------

function defold.final (self)
	ui.select_season_context = nil
	nc.remove_observer(self)
end -- final

---------------------------------------
-- update
---------------------------------------
-- function defold.update (self, dt)
-- 	thread.update(self, dt)
-- end -- update

---------------------------------------
-- on_message
---------------------------------------

-- function defold.on_message (self, message_id, message, sender)
-- 	thread.on_message(self, message_id, message, sender)
-- end -- on_message

---------------------------------------
-- enable
---------------------------------------

function enable (self, return_context)
	ui.first_responder = self
	self.return_context = return_context or nil
	post("#", MSG.ENABLE)
end -- enable

---------------------------------------
-- disable
---------------------------------------

function disable ()
	ui.first_responder = nil
	post("#", MSG.DISABLE)
end -- disable

---------------------------------------
-- on_language_change
---------------------------------------

function on_language_change (self)
	for _, control in next, self.controls do
		if control.on_language_change then
			control:on_language_change()
		end
	end
end -- on_language_change
