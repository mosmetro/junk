local defold = _G

-- import
local MSG = require("scripts.shared.messages")
local ui = require("scripts.shared.ui.ui")
local SimpleButton = require("scripts.shared.ui.controls.simple_button")
local SimpleToggle = require("scripts.shared.ui.controls.simple_toggle")
local translations = require("scripts.platformer.translations")
local nc = require("scripts.shared.notification_center")
local utils = require("scripts.shared.utils")

-- localization
-- local set_position = gui.set_position
-- local get_position = gui.get_position
-- local get_text_metrics_from_node = gui.get_text_metrics_from_node
local execute_in_context = utils.execute_in_context
local translate = translations.translate
local next = next
-- local hash = hash
local post = msg.post
-- local url = msg.url
local get_node = gui.get_node
local set_render_order = gui.set_render_order
local set_text = gui.set_text
-- local tostring = tostring
-- local format = string.format


-- functions
local enable
local disable
local on_language_change

---------------------------------------

-- init

---------------------------------------

function defold.init (self)
	ui.language_options_context = self
	disable(self)
	set_render_order(8)

	local language_group = {}

	local select_english = SimpleToggle.new {
		base_node = get_node("english/base"),
		dot_node = get_node("english/dot"),
		title_node = get_node("english/text"),
		radio_group = language_group,
		callback = function ()
			translations.set_language("en")
			nc.post_notification(translations.LANGUAGE_DID_CHANGE_NOTIFICATION)
		end,
		on_language_change = function (sender, language_code)
			sender.set_on(language_code == "en")
		end,
	}

	local select_swedish = SimpleToggle.new {
		base_node = get_node("swedish/base"),
		dot_node = get_node("swedish/dot"),
		title_node = get_node("swedish/text"),
		radio_group = language_group,
		callback = function ()
			translations.set_language("sv")
			nc.post_notification(translations.LANGUAGE_DID_CHANGE_NOTIFICATION)
		end,
		on_language_change = function (sender, language_code)
			sender.set_on(language_code == "sv")
		end,
	}

	local select_russian = SimpleToggle.new {
		base_node = get_node("russian/base"),
		dot_node = get_node("russian/dot"),
		title_node = get_node("russian/text"),
		radio_group = language_group,
		callback = function ()
			translations.set_language("ru")
			nc.post_notification(translations.LANGUAGE_DID_CHANGE_NOTIFICATION)
		end,
		on_language_change = function (sender, language_code)
			sender.set_on(language_code == "ru")
		end,
	}

	local back_button = SimpleButton.new {
		sensor_node = get_node("back/sensor"),
		image_node = get_node("back/image"),
		text_node = get_node("back/text"),
    released = SimpleButton.RELEASED_IMAGE,
		pressed = SimpleButton.PRESSED_IMAGE,
		callback = function ()
			disable(self)
			if self.return_context then
				execute_in_context(self.return_context, self.return_context.enable)
				self.return_context = nil
			end
		end,
		on_language_change = function (sender)
			set_text(sender.text_node, translate(translations.OPTIONS_COMMON_BUTTON_BACK))
		end,
	} -- back_button

	self.controls = {
		select_english,
		select_swedish,
		select_russian,
		back_button,
	}

	self.enable = enable
	self.disable = disable
	nc.add_observer(self, translations.LANGUAGE_DID_CHANGE_NOTIFICATION, on_language_change)
end -- init

---------------------------------------
-- final
---------------------------------------

function defold.final (self)
	ui.language_options_context = nil
	nc.remove_observer(self)
end -- final

---------------------------------------
-- on_message
---------------------------------------

function defold.on_message (self, message_id)
	if self.return_context and (message_id == MSG.ENABLE) then
		ui.first_responder = self
	end
end -- on_message

---------------------------------------
-- enable
---------------------------------------

function enable(self, return_context)
	if return_context then
		self.return_context = return_context
	end
	post("#", MSG.ENABLE)
end -- enable

---------------------------------------
-- disable
---------------------------------------

function disable(self)
	if self.return_context then
		ui.first_responder = nil
	end
	post("#", MSG.DISABLE)
end -- disable

---------------------------------------
-- on_language_change
---------------------------------------

function on_language_change (self)
	local title_node = get_node("title/text")
	set_text(title_node, translate(translations.OPTIONS_LANGUAGE_TITLE))
	local language_code = translations.get_language_code()

	for _, control in next, self.controls do
		if control.on_language_change then
			control:on_language_change(language_code)
		end
	end
end -- on_language_change
