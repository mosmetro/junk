local defold = _G

-- import
local game = require("scripts.platformer.game")
-- local utils = require("scripts.shared.utils")
local lights = require("scripts.shared.lights")
local MSG = require("scripts.shared.messages")
local GRP = require("scripts.shared.groups")
-- local LAYER = require("scripts.shared.layers")
local Queue = require("scripts.shared.queue")

-- localization
local url = msg.url
local post = msg.post
-- local vector3 = vmath.vector3
local vector4 = vmath.vector4
-- local set_constant = model.set_constant
-- local set_position = go.set_position
-- local get_position = go.get_position
local get_world_position = go.get_world_position
local get_id = go.get_id
local add_update_callback = game.add_update_callback
local remove_update_callback = game.remove_update_callback
local random = math.random

-- functions
local frame_update
local enable
local disable

-- constants
local TRIGGER_RESPONSE = MSG.TRIGGER_RESPONSE
local UPDATE_GROUP = game.update_group_lights

-- properties
go.property("color", vmath.vector4(1, 1, 1, 1))
go.property("falloff", vmath.vector4(1, 0, 150, 0))
go.property("enabled", false)
go.property("smoothing", 7)

---------------------------------------
-- init
---------------------------------------

function defold.init(self)
   -- local position = get_position()
   -- position.z = LAYER.DEBUG
   -- set_position(position)
   post("#sprite", MSG.DISABLE)

   self.gameobject = get_id()
   self.camera = get_id("/camera")
   self.full_screen_quad = url("/grade#model")
   self.light_position = vector4(0, 0, 0, 1)

   self.smooth_queue = Queue.new()
   self.last_sum = 0

   if self.enabled then
      enable(self)
   end
end -- init

---------------------------------------
-- final
---------------------------------------

function defold.final(self)
   disable(self)
   remove_update_callback(self, UPDATE_GROUP)
end -- final

---------------------------------------
-- frame_update
---------------------------------------

function frame_update(self, _)
   local position = get_world_position(self.gameobject)
   local light = self.light
   local light_position = self.light_position
   light_position.x = position.x - lights.camera_position.x + game.window.half_logic_width
   light_position.y = position.y - lights.camera_position.y + game.window.half_logic_height
   local screen_pos = game.ingame_projection * light_position
   screen_pos.x = screen_pos.x * 0.5
   screen_pos.y = screen_pos.y * 0.5

   local color = vector4(self.color)
   -- color.x = color.x * color.w
   -- color.y = color.y * color.w
   -- color.z = color.z * color.w

   if self.smooth_queue.length() >= self.smoothing then
      self.last_sum = self.last_sum - self.smooth_queue.pop_right()
   end

   local new_falloff_z = random(9, 135)
   self.smooth_queue.push_left(new_falloff_z)
   self.last_sum = self.last_sum + new_falloff_z
   self.falloff.z = self.last_sum / self.smooth_queue.length()

   local constants = lights.constants
   constants[light.position] = screen_pos
   constants[light.color] = color
   constants[light.falloff] = self.falloff
end -- frame_update

---------------------------------------
-- on_message
---------------------------------------

function defold.on_message(self, message_id, message)
   if message_id == TRIGGER_RESPONSE and message.other_group == GRP.CAMERA then
      if message.enter then
         enable(self)
      else -- exit
         disable(self)
      end
   end
end -- on_message

---------------------------------------
-- enable
---------------------------------------

function enable(self)
   -- utils.log("Try enable light...")
   if self.light then
      -- utils.log("Skip. Already enabled.")
      return
   end
   -- utils.log("Try get light...")
   self.light = lights.pop()
   if self.light then
      self.falloff.w = 1
      frame_update(self)
      add_update_callback(self, frame_update, UPDATE_GROUP)
      -- utils.log("Success.")
      -- else utils.log("Failed to get available light.")
   end
end -- enable

---------------------------------------
-- disable
---------------------------------------

function disable(self)
   -- utils.log("Try disable light...")
   if self.light then
      remove_update_callback(self, UPDATE_GROUP)
      self.falloff.w = 0
      frame_update(self)
      lights.push(self.light)
      self.light = nil
      -- utils.log("Success.")
      -- else utils.log("Skip. Already disabled.")
   end

end -- disable
