-- import
local MSG = require("scripts.shared.messages")
local SND = require("scripts.platformer.sound")
-- local COLOR = require("scripts.shared.colors")
local GROUP = require("scripts.shared.groups")
local LAYER = require("scripts.shared.layers")
local FX = require("scripts.platformer.fx")
local TAG = require("scripts.shared.tags")
local game = require("scripts.platformer.game")
local utils = require("scripts.shared.utils")
-- local nc = require("scripts.shared.notification_center")

-- localization
local defold = _G
local url = msg.url
local post = msg.post
local BORDER = GROUP.BORDER
local STATIC = GROUP.STATIC
local ONE_WAY_STATIC = GROUP.ONE_WAY_STATIC
local PLATFORM = GROUP.PLATFORM
local ONE_WAY_PLATFORM = GROUP.ONE_WAY_PLATFORM
local CRATE = GROUP.CRATE
-- local CAMERA = GROUP.CAMERA
-- local RAY_CAST_RESPONSE = MSG.RAY_CAST_RESPONSE
-- local TRIGGER_RESPONSE = MSG.TRIGGER_RESPONSE
-- local ENABLE = MSG.ENABLE
-- local DISABLE = MSG.DISABLE
local SET_PARENT = MSG.SET_PARENT
local get_position = go.get_position
local set_position = go.set_position
local get_id = go.get_id
local vector3 = vmath.vector3
local ray_cast = physics.ray_cast
local abs = math.abs
local random = math.random
local ceil = math.ceil
local sign = utils.sign
local next = next
local delete = go.delete
local add_update_callback = game.add_update_callback
local remove_update_callback = game.remove_update_callback
local get_context = game.get_context
local set_context = game.set_context
-- local add_observer = nc.add_observer
-- local remove_observer = nc.remove_observer
local get_delta_position = game.get_delta_position
-- local animate = go.animate
-- local PLAYBACK_ONCE_FORWARD = go.PLAYBACK_ONCE_FORWARD
-- local EASING_LINEAR = go.EASING_LINEAR
local play_sound = SND.play_sound
local play_flipbook = sprite.play_flipbook
local timer_delay = timer.delay

-- functions
local frame_update
local raycast_request
local raycast_response
local calculate_delta_position
local down_pass
local up_pass
local horizontal_pass
-- local ground_notification_callback
-- local subscribe
-- local unsubscribe
local fade_out_start
local fade_out_complete
local collect_gem

-- constants
local RAY_LENGTH = 5000

local GROUND = {
	STATIC,
	ONE_WAY_STATIC,
	PLATFORM,
	ONE_WAY_PLATFORM,
	CRATE,
	BORDER,
}

local SOLIDS = {
	STATIC,
  PLATFORM,
  CRATE,
	BORDER,
}

-- constants
local UPDATE_GROUP = game.update_group_after_player

-- properties
go.property("value", 1)
go.property("raycast_width", 8)
go.property("raycast_height", 8)
go.property("velocity", vmath.vector3())

---------------------------------------
-- init
---------------------------------------

function defold.init (self)
	self.gameobject = get_id()
  self.sprite = url("#sprite")

	self.responses = {}
	self.contacts = {}

	self.min_obstacle_height = 16
	self.min_obstacle_width = 16
	self.skin_width = 0.01
	self.vertical_ray_count = ceil(self.raycast_width / self.min_obstacle_width) + 1
	self.vertical_ray_spacing = (self.raycast_width - 2 * self.skin_width) / (self.vertical_ray_count - 1)
  -- utils.log("vertical_ray_count", self.vertical_ray_count)
  -- utils.log("vertical_ray_spacing", self.vertical_ray_spacing)
	self.horizontal_ray_count = ceil(self.raycast_height / self.min_obstacle_height) + 1
	self.horizontal_ray_spacing = (self.raycast_height -  2 * self.skin_width) / (self.horizontal_ray_count - 1)
  -- utils.log("horizontal_ray_count", self.horizontal_ray_count)
  -- utils.log("horizontal_ray_spacing", self.horizontal_ray_spacing)
  self.total_ray_count = self.horizontal_ray_count * 2 + self.vertical_ray_count * 2
  -- utils.log("total_ray_count", self.total_ray_count)

	self.first_right_ray = 1
	self.last_right_ray = self.first_right_ray + self.horizontal_ray_count - 1

	self.first_left_ray = self.last_right_ray + 1
	self.last_left_ray = self.first_left_ray + self.horizontal_ray_count - 1

	self.first_down_ray = self.last_left_ray + 1
	self.last_down_ray = self.first_down_ray + self.vertical_ray_count - 1

  self.first_up_ray = self.last_down_ray + 1
	self.last_up_ray = self.first_up_ray + self.vertical_ray_count - 1

  self.acceleration = vector3(0, -850, 0)
	self.max_vertical_speed = 800

	self.position = get_position()
	self.position.z = LAYER.OBJECT_1 - random() * 0.001
	set_position(self.position)

	self.delta_position = vector3()

	self.depth_x = self.raycast_width * 0.5
	self.depth_y = self.skin_width

	self.collision_right = false
	self.collision_left = false

	self.ray_start = vector3()
	self.ray_end = vector3()

	self.color = random(1, 5)
  self.collect_gem = collect_gem

	play_flipbook(self.sprite, FX.GEM_ANIMATION[self.value][self.color])

	add_update_callback(self, frame_update, UPDATE_GROUP)
	set_context(self.gameobject, self)
end -- init

---------------------------------------
-- final
---------------------------------------

function defold.final (self)
	remove_update_callback(self, UPDATE_GROUP)
	set_context(self.gameobject, nil)
  -- remove_observer(self)
  -- if self.broadcaster then
  --   unsubscribe(self)
  -- end
end -- final

---------------------------------------
-- subscribe
---------------------------------------

-- function subscribe(self)
--   self.broadcaster = self.ground
--   add_observer(self, self.broadcaster, ground_notification_callback)
-- end -- subscribe

---------------------------------------
-- unsubscribe
---------------------------------------

-- function unsubscribe(self)
--   remove_observer(self, self.broadcaster)
--   self.broadcaster = nil
-- end -- unsubscribe

---------------------------------------
-- frame_update
---------------------------------------

function frame_update(self, dt)
  if self.ground and self.velocity.y > 0 then
		local k = self.velocity.y / 150
		play_sound(SND.SHANTAE_ITEM_BOUNCE, utils.clamp(k * k, 0.05, 1))
  end

	self.position = self.position + self.delta_position
  set_position(self.position, self.gameobject)

  if self.ground and self.velocity.y == 0 then
		remove_update_callback(self, UPDATE_GROUP)
    local context = get_context(self.ground)
    if context.tag ~= TAG.STATIC then
      post(self.gameobject, SET_PARENT, { parent_id = self.ground })
      -- if self.broadcaster then
        -- unsubscribe(self)
      -- end
    -- else
      -- if self.broadcaster ~= self.ground then
    --     if self.broadcaster then
    --       unsubscribe(self)
    --     end
    --     utils.log("register")
    --     subscribe(self)
    --   end
    end

		timer_delay(3, false, fade_out_start)
		-- animate(self.sprite, TINT_W, PLAYBACK_ONCE_FORWARD, 0.33, EASING_LINEAR, 5, 2, fade_out_complete)
  -- else
  --   if self.broadcaster then
  --     utils.log("unregistered")
  --     unsubscribe(self)
  --   end
  end


  self.delta_position = calculate_delta_position(self, dt)
  raycast_request(self)
end -- frame_update

---------------------------------------
-- on_message
---------------------------------------

function defold.on_message(self, message_id, message)
	if message_id == MSG.RAY_CAST_RESPONSE then
		raycast_response(self, message)

  -- elseif message_id == TRIGGER_RESPONSE then
  --   if message.other_group == CAMERA then
  --     post(self.sprite, message.enter and ENABLE or DISABLE)
  --   end
	end
end -- on_message

---------------------------------------
-- ground_notification_callback
---------------------------------------

-- function ground_notification_callback(self, _, enable)
--   if enable then
--     add_update_callback(self, frame_update, UPDATE_GROUP)
--     -- post(self.sprite, MSG.ENABLE)
--   else
--     remove_update_callback(self, UPDATE_GROUP)
--     self.velocity.x = 0
--     self.velocity.y = 0
--     self.delta_position.x = 0
--     self.delta_position.y = 0
--     -- post(self.sprite, MSG.DISABLE)
--   end
-- end -- ground_notification_callback

---------------------------------------
-- calculate_delta_position
---------------------------------------

function calculate_delta_position (self, dt)
	local dv = self.acceleration * dt
	local old_velocity = self.velocity
	self.velocity = self.velocity + dv
	if abs(self.velocity.y) > self.max_vertical_speed then
		self.velocity.y = self.max_vertical_speed * sign(self.velocity.y)
	end
	-- calculate the translation this frame (delta position) by integrating the velocity
	-- http://lolengine.net/blog/2011/12/14/understanding-motion-in-games
	return (old_velocity + self.velocity) * 0.5 * dt
end -- calculate_delta_position

---------------------------------------
-- raycast_request
---------------------------------------

function raycast_request (self)
	-- reset flags
	self.collision_right = false
	self.collision_left = false

	-- update ray origins
	local position = self.position
	local skin_width = self.skin_width
	local half_width = self.raycast_width * 0.5

	local ray_start = self.ray_start
	local ray_end = self.ray_end

	-- right rays (horizontal)
	ray_start.x = position.x + half_width - self.depth_x
	ray_start.y = position.y + skin_width
	ray_end.x = ray_start.x + RAY_LENGTH
	ray_end.y = ray_start.y
	for ray = self.first_right_ray, self.last_right_ray do
		ray_cast(ray_start, ray_end, SOLIDS, ray)
		-- post("@render:", "draw_line", { start_point = ray_start, end_point = ray_end, color = COLOR.MAGENTA } )
		ray_start.y = ray_start.y + self.horizontal_ray_spacing
		ray_end.y = ray_start.y
	end

	-- left rays (horizontal)
	ray_start.x = position.x - half_width + self.depth_x
	ray_start.y = position.y + skin_width
	ray_end.x = ray_start.x - RAY_LENGTH
	ray_end.y = ray_start.y
	for ray = self.first_left_ray, self.last_left_ray do
		ray_cast(ray_start, ray_end, SOLIDS, ray)
		-- post("@render:", "draw_line", { start_point = ray_start, end_point = ray_end, color = COLOR.MAGENTA } )
		ray_start.y = ray_start.y + self.horizontal_ray_spacing
		ray_end.y = ray_start.y
	end

	-- down rays (vertical)
	ray_start.x = position.x - half_width + skin_width
	ray_start.y = position.y + skin_width
	ray_end.x = ray_start.x
	ray_end.y = ray_start.y - RAY_LENGTH
	for ray = self.first_down_ray, self.last_down_ray do
		ray_cast(ray_start, ray_end, GROUND, ray)
		-- post("@render:", "draw_line", { start_point = ray_start, end_point = ray_end, color = COLOR.MAGENTA } )
		ray_start.x = ray_start.x + self.vertical_ray_spacing
		ray_end.x = ray_start.x
	end

	-- up rays (vertical)
	ray_start.x = position.x - half_width + skin_width
	ray_start.y = position.y + self.raycast_height - skin_width
	ray_end.x = ray_start.x
	ray_end.y = ray_start.y + RAY_LENGTH
	for ray = self.first_up_ray, self.last_up_ray do
		ray_cast(ray_start, ray_end, SOLIDS, ray)
		-- post("@render:", "draw_line", { start_point = ray_start, end_point = ray_end, color = COLOR.MAGENTA } )
		ray_start.x = ray_start.x + self.vertical_ray_spacing
		ray_end.x = ray_start.x
	end

end -- raycast_request

---------------------------------------
-- raycast_response
---------------------------------------

function raycast_response (self, message)
	self.responses[message.request_id] = message
	if message.request_id < self.total_ray_count then
		return
	end
	-- all responses now collected

	local dx = self.delta_position.x
	local dy = self.delta_position.y

	local d1, v1 = down_pass(self, dy, self.velocity.y, self.first_down_ray, self.last_down_ray, 1)
	local d2, v2 = down_pass(self, dy, self.velocity.y, self.last_down_ray, self.first_down_ray, -1)

	-- dy = d1 > d2 and d1 or d2
	-- self.velocity.y = v1 > v2 and v1 or v2

  local d = d1 > d2 and d1 or d2
  local v = v1 > v2 and v1 or v2
  dy, self.velocity.y = up_pass(self, d, v, self.first_up_ray, self.last_up_ray, 1)

	self.previous_ground = self.ground
	self.ground = nil
	for _, g in next, self.contacts do
		if not self.ground then
			self.ground = g
		end
		if self.ground ~= g then
			local g_delta = get_delta_position(g)
			local ground_delta = get_delta_position(self.ground)
			if g_delta.y > ground_delta.y then
				self.ground = g
			elseif g_delta.x == 0 then
				self.ground = g
			end
		end
	end

	local ground_dx = get_delta_position(self.ground).x
	dx = dx + ground_dx

	if dx > 0 then
		dx = horizontal_pass(self, -1, dx, self.first_left_ray, self.last_left_ray)
		dx = horizontal_pass(self, 1, dx, self.first_right_ray, self.last_right_ray)
	else
		dx = horizontal_pass(self, 1, dx, self.first_right_ray, self.last_right_ray)
		dx = horizontal_pass(self, -1, dx, self.first_left_ray, self.last_left_ray)
	end

	if self.collision_left and self.velocity.x < 0 then
		self.velocity.x = -self.velocity.x * 0.8
	elseif self.collision_right and self.velocity.x > 0 then
		self.velocity.x = -self.velocity.x * 0.8
	else
		self.velocity.x = self.velocity.x * 0.99
	end

	self.delta_position.x = dx
	self.delta_position.y = dy
end -- raycast_response

---------------------------------------
-- horizontal_pass
---------------------------------------

function horizontal_pass (self, direction, dx, first_ray, last_ray)
	for ray = first_ray, last_ray do
		local response = self.responses[ray]
		local hit_distance = RAY_LENGTH * response.fraction - self.depth_x
		if abs(hit_distance) < 0.001 then
			hit_distance = 0
		end
		local target_dx = get_delta_position(response.id).x
		local delta = dx - target_dx
		if abs(delta) < 0.001 then
			delta = 0
		end

		if hit_distance <= abs(delta) then
			if direction == 1 then
				self.collision_right = true
			end
			if direction == -1 then
				self.collision_left = true
			end

			if delta * direction > 0 then
				dx = hit_distance * direction + target_dx
			end
		end
	end
	return dx
end -- horizontal_pass

---------------------------------------
-- down_pass
---------------------------------------

function down_pass (self, delta_y, velocity_y, start, finish, step)
	for i = start, finish, step do
		local response = self.responses[i]
		local target_delta_y = get_delta_position(response.id).y
		local hit_distance = response.fraction * RAY_LENGTH - self.skin_width
		if abs(hit_distance) < 0.001 then
			hit_distance = 0
		end

		if delta_y < 0 or target_delta_y ~= 0 then
			if target_delta_y < 0 then
				if delta_y < 0 then
					if hit_distance < abs(delta_y + target_delta_y) then
						delta_y = -hit_distance + target_delta_y
            if velocity_y < -60 then
              velocity_y = -velocity_y * 0.66
            end
					end
				end
			else -- target_delta_y >= 0 then
				if hit_distance + delta_y < target_delta_y then
					delta_y = -hit_distance + target_delta_y
          if velocity_y < -60 then
            velocity_y = -velocity_y * 0.66
          else
            velocity_y = 0
          end
				end
			end
		end
		self.contacts[response.request_id] = (hit_distance == 0) and response.id or nil
	end -- end for

	return delta_y, velocity_y
end -- down_pass

---------------------------------------
-- up_pass
---------------------------------------

function up_pass (self, delta_y, velocity_y, start, finish, step)
	-- local up_space = HUGE
	for i = start, finish, step do
		local response = self.responses[i]
		local target_delta_y = get_delta_position(response.id).y

		local hit_distance = response.fraction * RAY_LENGTH - self.skin_width
		-- if hit_distance < up_space then
		-- 	up_space = hit_distance
		-- end

		if delta_y > 0 or target_delta_y ~= 0 then
			if abs(hit_distance) < 0.001 then
				hit_distance = 0
			end

			local delta_position_y = delta_y - target_delta_y
			if hit_distance < delta_position_y then
				delta_y = hit_distance + target_delta_y
				if velocity_y > 0 then
					velocity_y = 0
				end
			end
		end
	end -- end for

	return delta_y, velocity_y--, up_space
end -- up_pass

---------------------------------------
-- fade_out_start
---------------------------------------

function fade_out_start(self)
	play_flipbook(self.sprite, FX.GEM_BLINK_ANIMATION[self.value][self.color])
	timer_delay(4, false, fade_out_complete)
end -- fade_out_start

---------------------------------------
-- fade_out_complete
---------------------------------------

function fade_out_complete()
	delete()
end -- fade_out_complete

---------------------------------------
-- collect_heart
---------------------------------------

function collect_gem(self, _)
	play_sound(SND.SHANTAE_PICKUP_GEM[self.value])
  delete()
  return self.value
end -- collect_heart
