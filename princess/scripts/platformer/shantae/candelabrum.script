-- import
local game = require("scripts.platformer.game")
local MSG = require("scripts.shared.messages")
local LAYER = require("scripts.shared.layers")
local SND = require("scripts.platformer.sound")
local GRP = require("scripts.shared.groups")
local FX = require("scripts.platformer.fx")
local lights = require("scripts.shared.lights")
local Queue = require("scripts.shared.queue")

-- localization
local defold = _G
local post = msg.post
local add_update_callback = game.add_update_callback
local remove_update_callback = game.remove_update_callback
-- local hash = hash
local url = msg.url
local get_id = go.get_id
local get_position = go.get_position
local set_position = go.set_position
local delete = go.delete
local collection_create = collectionfactory.create
local create_gameobject = factory.create
local vector4 = vmath.vector4
-- local vector3 = vmath.vector3
local set_context = game.set_context
local play_sound = SND.play_sound
local play_flipbook = sprite.play_flipbook
local random = math.random
-- local set = go.set
-- local animate = go.animate
-- local PLAYBACK_ONCE_FORWARD = go.PLAYBACK_ONCE_FORWARD
-- local EASING_INQUAD = go.EASING_INQUAD

-- functions
local frame_update
local apply_damage
local impact_complete
local enable
local disable

-- constants
local UPDATE_GROUP = game.update_group_lights
-- local IMPACT_FRAME = hash("shantae_candelabrum_short_impact")

-- properties
go.property("color", vmath.vector4(1, 1, 1, 1))
go.property("falloff", vmath.vector4(0.5, 0, 90, 0))
go.property("enabled", false)
go.property("smoothing", 20)
go.property("impact_animation", hash("shantae_candelabrum_short_impact"))
go.property("impact_soundfx", hash("SHANTAE_HIT_GLASS_02"))
go.property("light_height", 35)
go.property("debris_factory", msg.url("/factory#candelabrum_short_debris_factory_1"))

---------------------------------------
-- init
---------------------------------------

function defold.init(self)
  self.gameobject = get_id()
  self.collisionobject = url("#collisionobject")
  self.sprite = url("#sprite")
  self.position = get_position()
	self.position.z = LAYER.OBJECT_2
	set_position(self.position)
  set_context(self.gameobject, self)
  self.apply_damage = apply_damage
  self.smooth_queue = Queue.new()
  self.last_sum = 0
  if self.enabled then enable(self) end
end -- init

---------------------------------------
-- final
---------------------------------------

function defold.final(self)
  remove_update_callback(self, UPDATE_GROUP)
  set_context(self.gameobject, nil)
  disable(self)
end -- final

---------------------------------------
-- frame_update
---------------------------------------

function frame_update(self, _)
  local light = self.light
  local light_position = vector4(
  self.position.x - lights.camera_position.x + game.window.half_logic_width,
  self.position.y + self.light_height - lights.camera_position.y + game.window.half_logic_height,
  0, 1)
  local m = game.ingame_projection
  local screen_pos = vector4(m.m00 * light_position.x * 0.5, m.m11 * light_position.y * 0.5, 0, 1)
  -- local screen_pos = game.ingame_projection * light_position
  -- print(game.ingame_projection)
  -- print(light_position, screen_pos)
  -- screen_pos.x = screen_pos.x * 0.5
  -- screen_pos.y = screen_pos.y * 0.5


  if self.smooth_queue.length() >= self.smoothing then
    self.last_sum = self.last_sum - self.smooth_queue.pop_right()
  end

  local new_falloff_z = random(9, 135)
  self.smooth_queue.push_left(new_falloff_z)
  self.last_sum = self.last_sum + new_falloff_z
  -- self.falloff.z = self.last_sum / self.smooth_queue.length()

  local constants = lights.constants
  constants[light.position] = screen_pos
  constants[light.color] = self.color
  constants[light.falloff] = self.falloff
end -- frame_update

---------------------------------------
-- on_message
---------------------------------------

function defold.on_message(self, message_id, message)
	if message_id == MSG.TRIGGER_RESPONSE and message.other_group == GRP.CAMERA then
		if message.enter then
      enable(self)
		else -- exit
      disable(self)
		end
	end
end -- on_message

---------------------------------------
-- enable
---------------------------------------

function enable(self)
  -- utils.log("Try enable light...")
  if self.light then
    -- utils.log("Skip. Already enabled.")
    return
  end
  -- utils.log("Try get light...")
  self.light = lights.pop()
  if self.light then
    self.falloff.w = 1
    frame_update(self)
    add_update_callback(self, frame_update, UPDATE_GROUP)
    -- utils.log("Success.")
  -- else utils.log("Failed to get available light.")
  end
end -- enable

---------------------------------------
-- disable
---------------------------------------

function disable(self)
  -- utils.log("Try disable light...")
  if self.light then
    remove_update_callback(self, UPDATE_GROUP)
    self.falloff.w = 0
    frame_update(self)
    lights.push(self.light)
    self.light = nil
    -- utils.log("Success.")
  -- else utils.log("Skip. Already disabled.")
  end

end -- disable

---------------------------------------
-- apply_damage
---------------------------------------

function apply_damage(self)
  post(self.collisionobject, MSG.DISABLE)
  play_sound(self.impact_soundfx)
  play_flipbook(self.sprite, self.impact_animation, impact_complete)
  collection_create(self.debris_factory, self.position)
  self.position.y = self.position.y + 6
  create_gameobject(FX.HEART_SMALL_DROP_FACTORY, self.position)
end -- apply_damage

---------------------------------------
-- impact_complete
---------------------------------------

function impact_complete()
  delete()
end -- impact_complete
