local defold = _G
-- imports
local shared_state_module = require("scripts.shared.shared_state_module")
local _ = require("scripts.shared.msg_patcher")
local MSG = require("scripts.shared.messages")
-- local GUI = require("scripts.platformer.gui")
local game = require("scripts.platformer.game")
local utils = require("scripts.shared.utils")
local lights = require("scripts.shared.lights")

local screen_size = game.window.screen_size
local logic_size = game.window.logic_size
local default_layout_size = game.window.default_layout_size

local STATE_DEPTH_TEST = render.STATE_DEPTH_TEST
local STATE_STENCIL_TEST = render.STATE_STENCIL_TEST
local STATE_BLEND = render.STATE_BLEND
local BLEND_SRC_ALPHA = render.BLEND_SRC_ALPHA
local BLEND_ONE_MINUS_SRC_ALPHA = render.BLEND_ONE_MINUS_SRC_ALPHA
local STATE_CULL_FACE = render.STATE_CULL_FACE
local BUFFER_COLOR_BIT = render.BUFFER_COLOR_BIT
-- local BUFFER_DEPTH_BIT = render.BUFFER_DEPTH_BIT
local BUFFER_STENCIL_BIT = render.BUFFER_STENCIL_BIT

local FORMAT_RGBA = render.FORMAT_RGBA
local FILTER_NEAREST = render.FILTER_NEAREST
local WRAP_CLAMP_TO_EDGE = render.WRAP_CLAMP_TO_EDGE
-- local FORMAT_DEPTH = render.FORMAT_DEPTH

-- local ceil = math.ceil
local tostring = tostring
local hash = hash
local vector4 = vmath.vector4
local get_window_width = render.get_window_width
local get_window_height = render.get_window_height
local set_depth_mask = render.set_depth_mask
local set_stencil_mask = render.set_stencil_mask
local disable_state = render.disable_state
local enable_state = render.enable_state
local set_blend_func = render.set_blend_func
local set_view = render.set_view
local set_projection = render.set_projection
local draw = render.draw
local draw_debug3d = render.draw_debug3d
local tonumber = tonumber
local render_target = render.render_target
-- local enable_render_target = render.enable_render_target
-- local disable_render_target = render.disable_render_target
local enable_texture = render.enable_texture
local disable_texture = render.disable_texture
local constant_buffer = render.constant_buffer
-- local collectgarbage = collectgarbage

local set_render_target = render.set_render_target
local clear = render.clear
local set_viewport = render.set_viewport
local predicate = render.predicate
local get_config = sys.get_config

local matrix4 = vmath.matrix4
local matrix4_orthographic = vmath.matrix4_orthographic

local M4_IDENTITY = matrix4()
local VIEW = M4_IDENTITY
local GUI_PROJECTION
local INGAME_PROJECTION
-- local CLEAR_COLOR = vector4(1, 1, 1, 1)
-- local CLEAR_COLOR = vector4(0, 0, 0, 1)
local CLEAR_COLOR = vector4(0.5, 0.5, 0.5, 1)
-- local CLEAR_COLOR = vector4(1, 0, 1, 1)
-- local CLEAR_COLOR = vector4(0.8, 0.8, 0.8, 1)
local TRANSPARENT_BLACK = vector4(0, 0, 0, 0)
-- local CLEAR_COLOR = vector4(utils.tocolor("5a89c4"))

-- local buffers = {
--    [BUFFER_COLOR_BIT] = CLEAR_COLOR,
--    [BUFFER_DEPTH_BIT] = 1,
--    [BUFFER_STENCIL_BIT] = 0,
-- }

local buffers = {
   [BUFFER_COLOR_BIT] = CLEAR_COLOR,
   -- [BUFFER_DEPTH_BIT] = 1,
   [BUFFER_STENCIL_BIT] = 0,
}

local TILE
local GUI
local TEXT
local PARTICLE
local GRADE
local PARALLAX

-- local screen_width_to_pixel_size = {
--    [1600] = 4,
--    -- device
--    -- x2
--    [1136] = 2.8444, -- 1136 x 640  iPhone5S, SE        284 x 160       1.775
--    [1334] = 3.3333, -- 1334 x 750  iPhone8             333.5 x 187.5   1.778666
--    [1792] = 3.68, -- 1792 x 828  Xr                  448 x 207       2.1642
--
--   -- x3
--    [2208] = 6, -- 2208 x 1242 iPhone8+            368 x 207       1.777777  *** Check on real phone! ***
--    [2436] = 6, -- 2436 x 1125 iPhoneX, Xs         406 x 187.5     2.165333
--    [2688] = 6, -- XsMax                           448 x 207       2.1642
--
--    -- x2
--    [2048] = 6.8266, -- 2048 x 1536 iPad Mini, Air      341.33334350586 x 256     1.333333
--    [2224] = 8, -- 2224 x 1668 iPad Pro 10.5"      370.66665649414 x 278     1.333333
--    [2732] = 8, -- 2732 x 2048 iPad Pro 12.9"      455.33334350586 x 341.33334350586  1.333984
--
--
--    -- desktop simulation
--    -- x2
--    [568] = 2, -- 568 x 320  iPhone5S, SE
--    [667] = 2, -- 667 x 375  iPhone8
--    [896] = 2, -- 896 x 414  Xr (x2), XsMax (x3)
--
--    -- x3
--    [736] = 2, -- 736 x 414 iPhone8+
--    [812] = 2, -- 812 x 375 iPhoneX, Xs
--
--    -- x2
--    [1024] = 3, -- 1024 x 768 iPad Mini, Air
--    [1112] = 4, -- 1112 x 834 iPad Pro 10.5"
--    [1366] = 4, -- 1366 x 1024 iPad Pro 12.9"
-- }

-- local frame_count = 0
-- local previous_time = 0

---------------------------------------
-- init
---------------------------------------

function defold.init(self)
   utils.random_seed()
   game.reset_input()

   TILE     = predicate({ hash("tile") })
   GUI      = predicate({ hash("gui") })
   TEXT     = predicate({ hash("text") })
   PARTICLE = predicate({ hash("particle") })
   GRADE    = predicate({ hash("grade") })
   PARALLAX = predicate({ hash("parallax") })

   screen_size.x = get_window_width()
   screen_size.y = get_window_height()
   screen_size.z = screen_size.x / screen_size.y -- aspect correction

   utils.log("screen_size: " .. screen_size.x .. " x " .. screen_size.y)
   utils.log("aspect ratio: ", screen_size.z)
   default_layout_size.x = tonumber(get_config("display.width"))
   default_layout_size.y = tonumber(get_config("display.height"))

   -- GUI_PROJECTION = matrix4_orthographic(0, screen_size.x, 0, screen_size.y, -1, 1)
   GUI_PROJECTION = matrix4_orthographic(0, get_window_width(), 0, get_window_height(), -1, 1)

   logic_size.x = 284--256--332--ceil(logic_size.y * screen_size.z)--screen_size.x / pixel_size
   logic_size.y = 160--192--186--160--225--screen_size.y / pixel_size

   -- local pixel_size = screen_width_to_pixel_size[screen_size.x]
   -- utils.log("pixel size: " .. pixel_size)
   -- logic_size.x = screen_size.x / pixel_size
   -- logic_size.y = screen_size.y / pixel_size
   game.window.half_logic_width = logic_size.x * 0.5
   game.window.half_logic_height = logic_size.y * 0.5

   INGAME_PROJECTION = matrix4_orthographic(-logic_size.x * 0.5, logic_size.x * 0.5, -logic_size.y * 0.5, logic_size.y * 0.5, -1, 1)
   game.ingame_projection = INGAME_PROJECTION
   game.view_projection = VIEW
   utils.log("logic_size: " .. logic_size.x .. " x " .. logic_size.y)

   local color_params = {
      format = FORMAT_RGBA,
      width = screen_size.x,
      height = screen_size.y,
      min_filter = FILTER_NEAREST,
      mag_filter = FILTER_NEAREST,
      u_wrap = WRAP_CLAMP_TO_EDGE,
      v_wrap = WRAP_CLAMP_TO_EDGE
   }
   -- local depth_params = {
   --    format = FORMAT_DEPTH,
   --    width = screen_size.x,
   --    height = screen_size.y,
   --    u_wrap = WRAP_CLAMP_TO_EDGE,
   --    v_wrap = WRAP_CLAMP_TO_EDGE
   -- }

   self.target = render_target("original", { [BUFFER_COLOR_BIT] = color_params })
   -- self.target = render_target("original", {[BUFFER_COLOR_BIT] = color_params, [BUFFER_DEPTH_BIT] = depth_params})

   self.parallax_constants = constant_buffer()
   --self.parallax_constants.tint = vector4(0.2 * 0.8, 0.2 * 0.8, 0.2 * 0.8, 1.0)
   -- self.parallax_constants.tint = vector4(0.2, 0.2, 0.2, 0.8)

   local light_constants = constant_buffer()
   light_constants.resolution = vector4(screen_size)
   light_constants.ambient_color = vector4(1)
   for i = 0, 5 do -- 0 - player lamp light
   light_constants["light" .. tostring(i) .. "_position"] = vector4(0)
   light_constants["light" .. tostring(i) .. "_color"] = vector4(1)
      light_constants["light" .. tostring(i) .. "_falloff"] = vector4(1, 1, 1, 0) -- must be 1's (div by zero instead)
   end
   lights.constants = light_constants

   -- collectgarbage("stop")
   -- previous_time = socket.gettime()
end -- init

---------------------------------------
-- update
---------------------------------------

function defold.update(self)
--  if shared_state_module.some_go_context then
--    local current = _G[3700146495]
--    _G[3700146495] = shared_state_module.some_go_context
--    local result = go.get_world_transform()
--    _G[3700146495] = current
--    -- print(result)
-- end


set_viewport(0, 0, screen_size.x, screen_size.y)

set_depth_mask(false)
set_stencil_mask(0xff)
disable_state(STATE_DEPTH_TEST)
disable_state(STATE_STENCIL_TEST)
enable_state(STATE_BLEND)
set_blend_func(BLEND_SRC_ALPHA, BLEND_ONE_MINUS_SRC_ALPHA)
disable_state(STATE_CULL_FACE)

set_render_target(self.target, { transient = { render.BUFFER_STENCIL_BIT } })
   -- enable_render_target(self.target)
   buffers[BUFFER_COLOR_BIT] = TRANSPARENT_BLACK
   clear(buffers)
   set_view(VIEW)
   set_projection(INGAME_PROJECTION)
   draw(TILE)
   draw(PARTICLE)
   draw_debug3d() -- draw raycasts
   -- disable_render_target(self.target)
   set_render_target(render.RENDER_TARGET_DEFAULT)

   -- buffers[BUFFER_COLOR_BIT] = CLEAR_COLOR
   -- clear(buffers)
   -- set_view(VIEW)
   -- set_projection(INGAME_PROJECTION)
   -- self.parallax_constants.tint = lights.constants.ambient_color
   -- draw(PARALLAX, self.parallax_constants)

   buffers[BUFFER_COLOR_BIT] = CLEAR_COLOR
   clear(buffers)
   -- set_view(VIEW)
   -- set_projection(INGAME_PROJECTION)
   self.parallax_constants.tint = lights.constants.ambient_color
   draw(PARALLAX, self.parallax_constants)
   set_view(M4_IDENTITY) -- set view and projection so quad fills the viewport
   set_projection(M4_IDENTITY)
   enable_texture(0, self.target, BUFFER_COLOR_BIT)
   draw(GRADE, lights.constants)
   disable_texture(0, self.target)

   -- GUI
   set_viewport(0, 0, get_window_width(), get_window_height())
   set_projection(GUI_PROJECTION)
   enable_state(STATE_STENCIL_TEST)
   draw(GUI)
   draw(TEXT)
   -- draw_debug3d() -- draw touch areas
   -- disable_state(STATE_STENCIL_TEST)

   game.increment_frame()
end -- update

---------------------------------------

-- on_message

---------------------------------------

function defold.on_message(_, message_id, message)
   if message_id == MSG.SET_VIEW_PROJECTION then
     VIEW = message.view
    -- print(VIEW)
    game.view_projection = VIEW
 elseif message_id == MSG.CLEAR_COLOR then
   buffers[BUFFER_COLOR_BIT] = message.color
end
end
